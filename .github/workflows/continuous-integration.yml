name: CI

on:
  push:
    paths:
    - '**.cc'
    - '**.h'
    - '**Tupfile'
    - 'Tuprules.tup'
    - '.github/workflows/continuous-integration.yml'
  pull_request:
    paths:
    - '**.cc'
    - '**.h'
    - '**Tupfile'
    - 'Tuprules.tup'
    - '.github/workflows/continuous-integration.yml'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Install MinGW (Windows)
        if: matrix.os == 'windows-latest'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Install tools and dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y tup libglfw3-dev libvulkan-dev libxi-dev libxxf86vm-dev libreadline-dev

      - name: Install tools and dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          curl http://gittup.org/tup/win32/tup-latest.zip -o tup.zip
          Expand-Archive -Force tup.zip .

      - name: Update submodules
        run: |
          git submodule init
          git submodule update
          git submodule status external/lua >luastatus
          git submodule status external/yaml-cpp >yaml-cppstatus

      - name: Cache Handling (lua)
        id: cache-lua
        uses: actions/cache@v2
        with:
          path: |
            external/lua/liblua.a
          key: ${{ runner.os }}-lua-1-${{ hashFiles('luastatus') }}

      - name: Cache Handling (yaml-cpp)
        id: cache-yaml
        uses: actions/cache@v2
        with:
          path: |
            external/yaml-cpp/libyaml-cpp.a
            external/yaml-cpp/include/yaml-cpp/dll.h
          key: ${{ runner.os }}-yaml-cpp-1-${{ hashFiles('yaml-cppstatus') }}

      - name: Build Lua Library (Ubuntu)
        if: (steps.cache-lua.outputs.cache-hit != 'true') && (matrix.os == 'ubuntu-latest')
        run: |
          cd external/lua
          sed -i 's/CC= gcc/CC= g++/g' makefile
          make all
          cd ../..

      - name: Build Lua Library (Windows)
        if: (steps.cache-lua.outputs.cache-hit != 'true') && (matrix.os == 'windows-latest')
        run: |
          cd external/lua
          sed -i 's/CC= gcc/CC= g++/g' makefile
          sed -i 's/DLUA_USE_LINUX -DLUA_USE_READLINE/DLUA_USE_WINDOWS/g' makefile
          sed -i 's/-ldl -lreadline//g' makefile
          make all
          cd ../..

      - name: Build YAML Library (Ubuntu)
        if: (steps.cache-yaml.outputs.cache-hit != 'true') && (matrix.os == 'ubuntu-latest')
        run: |
          cd external/yaml-cpp
          cmake .
          make
          cd ../..

      - name: Build YAML Library (Windows)
        if: (steps.cache-yaml.outputs.cache-hit != 'true') && (matrix.os == 'windows-latest')
        run: |
          cd external/yaml-cpp
          cmake -G "MinGW Makefiles" .
          make
          cd ../..

      - name: Run tup to build (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          tup

      - name: Run tup to build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          perl -MCPAN -e 'install Pod::Usage'
          ./tup

      - name: Run tests
        run: test/test
