name: CI

on:
  push:
    paths:
    - '**.cc'
    - '**.h'
    - '**Tupfile'
    - 'Tuprules.tup'
    - '.github/workflows/continuous-integration.yml'
  pull_request:
    paths:
    - '**.cc'
    - '**.h'
    - '**Tupfile'
    - 'Tuprules.tup'
    - '.github/workflows/continuous-integration.yml'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Install MSYS2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          update: true
          install: git gcc make cmake base-devel libreadline-devel

      - name: Install tools and dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y tup libvulkan-dev libxi-dev libxxf86vm-dev libreadline-dev xorg-dev

      - name: Install tools and dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          curl http://gittup.org/tup/win32/tup-latest.zip -o tup.zip
          7z x -bso0 -bsp0 tup.zip

      - name: Install Vulkan SDK (Windows)
        if: matrix.os == 'windows-latest'
        uses: humbletim/setup-vulkan-sdk@v1.0.3

      - name: Update submodules
        run: |
          git submodule init
          git submodule update
          git submodule status external/lua >luastatus
          git submodule status external/yaml-cpp >yaml-cppstatus
          git submodule status external/glfw >glfwstatus

      - name: Cache Handling (lua)
        id: cache-lua
        uses: actions/cache@v2
        with:
          path: |
            external/lua/liblua.a
          key: ${{ runner.os }}-lua-1-${{ hashFiles('luastatus') }}

      - name: Cache Handling (yaml-cpp)
        id: cache-yaml
        uses: actions/cache@v2
        with:
          path: |
            external/yaml-cpp/libyaml-cpp.a
            external/yaml-cpp/include/yaml-cpp/dll.h
          key: ${{ runner.os }}-yaml-cpp-1-${{ hashFiles('yaml-cppstatus') }}

      - name: Cache Handling (GLFW)
        id: cache-glfw
        uses: actions/cache@v2
        with:
          path: |
            external/glfw/src/libglfw3.a
          key: ${{ runner.os }}-glfw-2-${{ hashFiles('glfwstatus') }}

      - name: Build Lua Library (Ubuntu)
        if: (steps.cache-lua.outputs.cache-hit != 'true') && (matrix.os == 'ubuntu-latest')
        run: |
          cd external/lua
          sed -i 's/CC= gcc/CC= g++/g' makefile
          make all
          cd ../..

      - name: Build Lua Library (Windows)
        if: (steps.cache-lua.outputs.cache-hit != 'true') && (matrix.os == 'windows-latest')
        shell: msys2 {0}
        run: |
          cd external/lua
          sed -i 's/CC= gcc/CC= g++/g' makefile
          make all
          cd ../..

      - name: Build YAML Library (Ubuntu)
        if: (steps.cache-yaml.outputs.cache-hit != 'true') && (matrix.os == 'ubuntu-latest')
        run: |
          cd external/yaml-cpp
          cmake .
          make yaml-cpp
          cd ../..

      - name: Build YAML Library (Windows)
        if: (steps.cache-yaml.outputs.cache-hit != 'true') && (matrix.os == 'windows-latest')
        shell: msys2 {0}
        run: |
          cd external/yaml-cpp
          cmake .
          make yaml-cpp
          cd ../..

      - name: Build GLFW Library (Ubuntu)
        if: (steps.cache-glfw.outputs.cache-hit != 'true') && (matrix.os == 'ubuntu-latest')
        run: |
          cd external/glfw
          cmake -DBUILD_SHARED_LIBS=OFF -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF .
          make glfw
          cd ../..

      - name: Build GLFW Library (Windows)
        if: (steps.cache-glfw.outputs.cache-hit != 'true') && (matrix.os == 'windows-latest')
        shell: msys2 {0}
        run: |
          cd external/glfw
          cmake -G "Unix Makefiles" -DGLFW_BUILD_WIN32=ON -DBUILD_SHARED_LIBS=OFF -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF .
          make glfw
          cd ../..

      - name: Run tup to build (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          tup

      - name: Run tup to build (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          ./tup

      - name: Run tests
        run: test/test
